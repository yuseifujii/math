// Á¥†Êï∞Âà§ÂÆö„Ç≤„Éº„É†„ÅÆJavaScript

let score = 0;
let streak = 0;
let currentNumber = 0;
let isGameActive = false;
let selectedLevel = null;
let maxNumber = 299; // „Éá„Éï„Ç©„É´„Éà„ÅØ‰∏≠Á¥ö
let questionsAnswered = 0;
let highScore = 0;
let lives = 3;
const MAX_LIVES = 3;
let gameStartTime = null;

// DOMË¶ÅÁ¥†„ÅÆÂèñÂæó
const scoreElement = document.getElementById('score');
const streakElement = document.getElementById('streak');
const numberDisplay = document.getElementById('number-display');
const resultMessage = document.getElementById('result-message');
const startBtn = document.getElementById('start-btn');
const primeBtn = document.getElementById('prime-btn');
const notPrimeBtn = document.getElementById('not-prime-btn');
const gameContent = document.querySelector('.game-content');
const levelSelection = document.getElementById('level-selection');
const levelButtons = document.querySelectorAll('.level-btn');
const gameContainer = document.getElementById('prime-game');
const highScoreDisplay = document.getElementById('high-score-display');
const progressBar = document.getElementById('progress-bar');
const progressContainer = document.querySelector('.progress-container');
const livesDisplay = document.getElementById('lives-display');
const gameOverScreen = document.getElementById('game-over');
const finalScoreElement = document.getElementById('final-score');
const gameOverMessage = document.getElementById('game-over-message');
const restartBtn = document.getElementById('restart-btn');

// Êñ∞„Åó„ÅèËøΩÂä†„Åô„ÇãDOMË¶ÅÁ¥†
const userInfoForm = document.getElementById('user-info-form');
const userAffiliationInput = document.getElementById('user-affiliation');
const userNicknameInput = document.getElementById('user-nickname');
const backToLevelBtn = document.getElementById('back-to-level-btn');
const rankingDashboardBtn = document.getElementById('ranking-dashboard-btn');
const rankingModal = document.getElementById('ranking-modal');
const closeRankingBtn = document.getElementById('close-ranking-btn');
const rankingTableBody = document.getElementById('ranking-table-body');
const rankingUpdateTime = document.getElementById('ranking-update-time');
const rankingEmpty = document.getElementById('ranking-empty');
const rankingLoading = document.getElementById('ranking-loading');
const rankingError = document.getElementById('ranking-error');
const rankingErrorMessage = document.getElementById('ranking-error-message');
const rankingRetryBtn = document.getElementById('ranking-retry-btn');
const totalParticipantsElement = document.getElementById('total-participants');

// ÊñáÂ≠óÊï∞„Ç´„Ç¶„É≥„Çø„Éº
const affiliationCounter = document.getElementById('affiliation-counter');
const nicknameCounter = document.getElementById('nickname-counter');

// Êé≤Á§∫ÊùøÈñ¢ÈÄ£„ÅÆË¶ÅÁ¥†
const postNicknameInput = document.getElementById('post-nickname');
const postContentInput = document.getElementById('post-content');
const submitPostBtn = document.getElementById('submit-post-btn');
const postsLoading = document.getElementById('posts-loading');
const postsError = document.getElementById('posts-error');
const postsErrorMessage = document.getElementById('posts-error-message');
const postsRetryBtn = document.getElementById('posts-retry-btn');
const postsEmpty = document.getElementById('posts-empty');
const postsList = document.getElementById('posts-list');
const totalPostsElement = document.getElementById('total-posts');
const postNicknameCounter = document.getElementById('post-nickname-counter');
const postContentCounter = document.getElementById('post-content-counter');
const loadMoreContainer = document.getElementById('load-more-container');
const loadMoreBtn = document.getElementById('load-more-btn');
const loadMoreCount = document.getElementById('load-more-count');

// „É¶„Éº„Ç∂„ÉºÊÉÖÂ†±
let userInfo = {
    affiliation: '',
    nickname: ''
};

// ÊäïÁ®øË°®Á§∫ÁÆ°ÁêÜ
let allPosts = []; // ÂÖ®„Å¶„ÅÆÊäïÁ®ø„Éá„Éº„Çø
let displayedPostsCount = 0; // ÁèæÂú®Ë°®Á§∫„Åï„Çå„Å¶„ÅÑ„ÇãÊäïÁ®øÊï∞
const POSTS_PER_PAGE = 10; // 1Âõû„Å´Ë°®Á§∫„Åô„ÇãÊäïÁ®øÊï∞

// APIË®≠ÂÆö
const API_CONFIG = {
    baseURL: window.location.hostname === 'localhost' 
        ? 'http://localhost:3000' 
        : '', // Vercel„Åß„ÅØÁõ∏ÂØæ„Éë„Çπ„Çí‰ΩøÁî®
    timeout: 10000 // 10Áßí„Çø„Ç§„É†„Ç¢„Ç¶„Éà
};

// „É©„É≥„Ç≠„É≥„Ç∞„Ç∑„Çπ„ÉÜ„É†ÔºàAPIÂÆüË£ÖÔºâ
class RankingSystem {
    constructor() {
        this.isLoading = false;
        this.lastError = null;
    }

    // APIÂëº„Å≥Âá∫„ÅóÂÖ±ÈÄö„É°„ÇΩ„ÉÉ„Éâ
    async apiCall(endpoint, options = {}) {
        const url = `${API_CONFIG.baseURL}/api${endpoint}`;
        
        const defaultOptions = {
            headers: {
                'Content-Type': 'application/json',
            },
            timeout: API_CONFIG.timeout,
        };

        try {
            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), API_CONFIG.timeout);

            const response = await fetch(url, {
                ...defaultOptions,
                ...options,
                signal: controller.signal,
            });

            clearTimeout(timeoutId);

            if (!response.ok) {
                const errorText = await response.text();
                console.error('‚ùå HTTP„Ç®„É©„Éº:', response.status, errorText);
                throw new Error(`API Error: ${response.status} ${response.statusText} - ${errorText}`);
            }

            const data = await response.json();
            
            if (!data.success) {
                throw new Error(data.error || 'API„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü');
            }

            return data;
        } catch (error) {
            console.error('üí• APIÂëº„Å≥Âá∫„Åó„Ç®„É©„Éº:', error);
            if (error.name === 'AbortError') {
                throw new Error('„É™„ÇØ„Ç®„Çπ„Éà„Åå„Çø„Ç§„É†„Ç¢„Ç¶„Éà„Åó„Åæ„Åó„Åü');
            }
            throw error;
        }
    }

    // „É©„É≥„Ç≠„É≥„Ç∞„Éá„Éº„Çø„ÇíÂèñÂæó
    async getRankings() {
        this.isLoading = true;
        this.lastError = null;

        try {
            console.log('üåê APIÂëº„Å≥Âá∫„ÅóÈñãÂßã: /rankings/get');
            const data = await this.apiCall('/rankings/get', {
                method: 'GET'
            });

            // APIÂÖ®‰Ωì„ÅÆ„É¨„Çπ„Éù„É≥„Çπ„ÇíËøî„ÅôÔºàrankingsÈÖçÂàó + totalParticipantsÔºâ
            return data;
        } catch (error) {
            console.error('‚ùå „É©„É≥„Ç≠„É≥„Ç∞ÂèñÂæó„Ç®„É©„Éº:', error);
            this.lastError = error.message;
            
            // „Ç®„É©„ÉºÊôÇ„ÅØLocalStorage„ÅÆ„Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó„Éá„Éº„Çø„ÇíËøî„Åô
            const backupData = localStorage.getItem('primeGameRanking_backup');
            const backupArray = backupData ? JSON.parse(backupData) : [];
            
            // „Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó„Éá„Éº„Çø„ÇíAPI„É¨„Çπ„Éù„É≥„ÇπÂΩ¢Âºè„ÅßËøî„Åô
            return {
                rankings: backupArray,
                totalParticipants: backupArray.length,
                count: backupArray.length,
                lastUpdated: new Date().toISOString()
            };
        } finally {
            this.isLoading = false;
        }
    }

    // Êñ∞„Åó„ÅÑ„Çπ„Ç≥„Ç¢„ÇíËøΩÂä†
    async addScore(score, nickname, affiliation, sessionData = {}) {
        this.isLoading = true;
        this.lastError = null;

        try {
            const data = await this.apiCall('/rankings/submit', {
                method: 'POST',
                body: JSON.stringify({
                    score,
                    nickname,
                    affiliation,
                    sessionData: {
                        ...sessionData,
                        timestamp: new Date().toISOString(),
                        userAgent: navigator.userAgent,
                    }
                })
            });

            // ÊàêÂäüÊôÇ„ÅØÊúÄÊñ∞„É©„É≥„Ç≠„É≥„Ç∞„ÇíÂèñÂæó„Åó„Å¶„Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó„Å®„Åó„Å¶‰øùÂ≠ò
            const latestData = await this.getRankings();
            const latestRankings = latestData.rankings || [];
            localStorage.setItem('primeGameRanking_backup', JSON.stringify(latestRankings));

            return data;
        } catch (error) {
            console.error('„Çπ„Ç≥„Ç¢ÈÄÅ‰ø°„Ç®„É©„Éº:', error);
            this.lastError = error.message;
            throw error;
        } finally {
            this.isLoading = false;
        }
    }

    // „Ç®„É©„ÉºÁä∂ÊÖã„Çí„ÇØ„É™„Ç¢
    clearError() {
        this.lastError = null;
    }

    // „É≠„Éº„Éá„Ç£„É≥„Ç∞Áä∂ÊÖã„ÇíÂèñÂæó
    getLoadingState() {
        return this.isLoading;
    }

    // ÊúÄÂæå„ÅÆ„Ç®„É©„Éº„ÇíÂèñÂæó
    getLastError() {
        return this.lastError;
    }
}

// Êé≤Á§∫Êùø„Ç∑„Çπ„ÉÜ„É†ÔºàAPIÂÆüË£ÖÔºâ
class BoardSystem {
    constructor() {
        this.isLoading = false;
        this.lastError = null;
    }

    // APIÂëº„Å≥Âá∫„ÅóÂÖ±ÈÄö„É°„ÇΩ„ÉÉ„ÉâÔºàRankingSystem„Å®Âêå„ÅòÊßãÈÄ†Ôºâ
    async apiCall(endpoint, options = {}) {
        const url = `${API_CONFIG.baseURL}/api${endpoint}`;
        
        const defaultOptions = {
            headers: {
                'Content-Type': 'application/json',
            },
            timeout: API_CONFIG.timeout,
        };

        try {
            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), API_CONFIG.timeout);

            const response = await fetch(url, {
                ...defaultOptions,
                ...options,
                signal: controller.signal,
            });

            clearTimeout(timeoutId);

            if (!response.ok) {
                const errorText = await response.text();
                console.error('‚ùå HTTP„Ç®„É©„Éº:', response.status, errorText);
                throw new Error(`API Error: ${response.status} ${response.statusText} - ${errorText}`);
            }

            const data = await response.json();
            
            if (!data.success) {
                throw new Error(data.error || 'API„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü');
            }

            return data;
        } catch (error) {
            if (error.name === 'AbortError') {
                throw new Error('„É™„ÇØ„Ç®„Çπ„Éà„Åå„Çø„Ç§„É†„Ç¢„Ç¶„Éà„Åó„Åæ„Åó„Åü');
            }
            throw error;
        }
    }

    // ÊäïÁ®ø„ÇíÈÄÅ‰ø°
    async submitPost(nickname, content) {
        if (this.isLoading) {
            throw new Error('ÁèæÂú®Âá¶ÁêÜ‰∏≠„Åß„Åô„ÄÇ„Åó„Å∞„Çâ„Åè„ÅäÂæÖ„Å°„Åè„Å†„Åï„ÅÑ„ÄÇ');
        }

        this.isLoading = true;

        try {
            const data = await this.apiCall('/board/submit', {
                method: 'POST',
                body: JSON.stringify({
                    nickname: nickname,
                    content: content
                })
            });

            return data;
        } catch (error) {
            console.error('ÊäïÁ®øÈÄÅ‰ø°„Ç®„É©„Éº:', error);
            this.lastError = error.message;
            throw error;
        } finally {
            this.isLoading = false;
        }
    }

    // ÊäïÁ®ø‰∏ÄË¶ß„ÇíÂèñÂæó
    async getPosts() {
        try {
            const data = await this.apiCall('/board/get', {
                method: 'GET'
            });

            // APIÂÖ®‰Ωì„ÅÆ„É¨„Çπ„Éù„É≥„Çπ„ÇíËøî„ÅôÔºàpostsÈÖçÂàó + totalPostsÔºâ
            return data;
        } catch (error) {
            console.error('‚ùå ÊäïÁ®øÂèñÂæó„Ç®„É©„Éº:', error);
            this.lastError = error.message;
            
            // „Ç®„É©„ÉºÊôÇ„ÅØÁ©∫„ÅÆ„Éá„Éº„Çø„ÇíËøî„Åô
            return {
                posts: [],
                totalPosts: 0,
                count: 0,
                lastUpdated: new Date().toISOString()
            };
        }
    }

    // „Ç®„É©„ÉºÁä∂ÊÖã„Çí„ÇØ„É™„Ç¢
    clearError() {
        this.lastError = null;
    }

    // „É≠„Éº„Éá„Ç£„É≥„Ç∞Áä∂ÊÖã„ÇíÂèñÂæó
    getLoadingState() {
        return this.isLoading;
    }

    // ÊúÄÂæå„ÅÆ„Ç®„É©„Éº„ÇíÂèñÂæó
    getLastError() {
        return this.lastError;
    }
}

const rankingSystem = new RankingSystem();
const boardSystem = new BoardSystem();

// „É©„É≥„Ç≠„É≥„Ç∞„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ„ÅÆË°®Á§∫
async function showRankingDashboard() {
    rankingModal.style.display = 'block';
    await updateRankingDisplay();
}

// „É©„É≥„Ç≠„É≥„Ç∞„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ„ÇíÈñâ„Åò„Çã
function closeRankingDashboard() {
    rankingModal.style.display = 'none';
}

// Ë°®Á§∫Áä∂ÊÖã„Çí„É™„Çª„ÉÉ„Éà
function resetRankingDisplayState() {
    rankingLoading.style.display = 'none';
    rankingError.style.display = 'none';
    rankingTableBody.style.display = 'none';
    rankingEmpty.style.display = 'none';
}

// „É©„É≥„Ç≠„É≥„Ç∞Ë°®Á§∫„ÇíÊõ¥Êñ∞
async function updateRankingDisplay() {
    // Ë°®Á§∫Áä∂ÊÖã„Çí„É™„Çª„ÉÉ„Éà
    resetRankingDisplayState();
    
    // „É≠„Éº„Éá„Ç£„É≥„Ç∞Ë°®Á§∫
    rankingLoading.style.display = 'block';
    
    try {
        const data = await rankingSystem.getRankings();
        
        // „Éá„Éº„ÇøÊßãÈÄ†„ÇíÁ¢∫Ë™çÔºàAPI„É¨„Çπ„Éù„É≥„ÇπÂÖ®‰Ωì vs „É©„É≥„Ç≠„É≥„Ç∞ÈÖçÂàó„ÅÆ„ÅøÔºâ
        const rankings = Array.isArray(data) ? data : data.rankings || [];
        const totalParticipants = data.totalParticipants || 0;
        
        // „É≠„Éº„Éá„Ç£„É≥„Ç∞„ÇíÈùûË°®Á§∫
        rankingLoading.style.display = 'none';
        
        if (rankings.length === 0) {
            rankingEmpty.style.display = 'block';
            rankingUpdateTime.textContent = '--';
            totalParticipantsElement.textContent = totalParticipants || '--';
            return;
        }

        rankingTableBody.style.display = 'table-row-group';
        
        // „ÉÜ„Éº„Éñ„É´„ÅÆÂÜÖÂÆπ„Çí„ÇØ„É™„Ç¢
        rankingTableBody.innerHTML = '';
        
        // „É©„É≥„Ç≠„É≥„Ç∞„Éá„Éº„Çø„ÇíË°®Á§∫
        rankings.forEach((entry, index) => {
            const row = document.createElement('tr');
            if (index < 3) {
                row.classList.add(`rank-${index + 1}`);
            }
            
            const rank = index + 1;
            const medal = rank === 1 ? 'ü•á' : rank === 2 ? 'ü•à' : rank === 3 ? 'ü•â' : '';
            
            const date = new Date(entry.timestamp);
            const timeString = date.toLocaleString('ja-JP', {
                month: 'short',
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            });
            
            row.innerHTML = `
                <td>${medal} ${rank}</td>
                <td class="score-cell">${entry.score}</td>
                <td class="nickname-cell">${escapeHtml(entry.nickname)}</td>
                <td class="affiliation-cell">${escapeHtml(entry.affiliation)}</td>
                <td class="time-cell">${timeString}</td>
            `;
            
            rankingTableBody.appendChild(row);
        });
        
        // ÊúÄÁµÇÊõ¥Êñ∞ÊôÇÂàª„Å®ÂèÇÂä†ËÄÖÊï∞„ÇíË®≠ÂÆö
        const now = new Date();
        rankingUpdateTime.textContent = now.toLocaleString('ja-JP');
        totalParticipantsElement.textContent = totalParticipants;
        
    } catch (error) {
        // „É≠„Éº„Éá„Ç£„É≥„Ç∞„ÇíÈùûË°®Á§∫
        rankingLoading.style.display = 'none';
        
        // „Ç®„É©„ÉºË°®Á§∫
        rankingError.style.display = 'block';
        rankingErrorMessage.textContent = error.message || '„É©„É≥„Ç≠„É≥„Ç∞„ÅÆË™≠„ÅøËæº„Åø„Å´Â§±Êïó„Åó„Åæ„Åó„Åü';
        
        console.error('„É©„É≥„Ç≠„É≥„Ç∞Ë°®Á§∫„Ç®„É©„Éº:', error);
    }
}

// HTML„Ç®„Çπ„Ç±„Éº„ÉóÈñ¢Êï∞
function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

// ÊñáÂ≠óÊï∞„Ç´„Ç¶„É≥„Çø„ÉºÊõ¥Êñ∞Èñ¢Êï∞
function updateCharCounter(input, counter, maxLength) {
    const currentLength = input.value.length;
    counter.textContent = `${currentLength}/${maxLength}`;
    
    // Ëâ≤„ÅÆÂ§âÊõ¥
    counter.classList.remove('warning', 'danger');
    if (currentLength >= maxLength * 0.9) {
        counter.classList.add('danger');
    } else if (currentLength >= maxLength * 0.7) {
        counter.classList.add('warning');
    }
}

// ÂäπÊûúÈü≥„Çí‰ΩúÊàê„Åô„ÇãÈñ¢Êï∞
function playSound(frequency, duration, type = 'sine') {
    const audioContext = new (window.AudioContext || window.webkitAudioContext)();
    const oscillator = audioContext.createOscillator();
    const gainNode = audioContext.createGain();
    
    oscillator.connect(gainNode);
    gainNode.connect(audioContext.destination);
    
    oscillator.frequency.value = frequency;
    oscillator.type = type;
    
    gainNode.gain.setValueAtTime(0.3, audioContext.currentTime);
    gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + duration);
    
    oscillator.start(audioContext.currentTime);
    oscillator.stop(audioContext.currentTime + duration);
}

// Ê≠£Ëß£Èü≥
function playCorrectSound() {
    playSound(523, 0.1); // C5
    setTimeout(() => playSound(659, 0.1), 100); // E5
    setTimeout(() => playSound(784, 0.2), 200); // G5
}

// ‰∏çÊ≠£Ëß£Èü≥
function playIncorrectSound() {
    playSound(300, 0.3, 'sawtooth');
}

// „É¨„Éô„É´„Ç¢„ÉÉ„ÉóÈü≥
function playLevelUpSound() {
    playSound(440, 0.1); // A4
    setTimeout(() => playSound(554, 0.1), 100); // C#5
    setTimeout(() => playSound(659, 0.1), 200); // E5
    setTimeout(() => playSound(880, 0.3), 300); // A5
}

// Á¥ôÂêπÈõ™„Ç®„Éï„Çß„ÇØ„Éà
function createConfetti() {
    const container = document.createElement('div');
    container.className = 'confetti-container';
    document.body.appendChild(container);
    
    const colors = ['#ff0000', '#00ff00', '#0000ff', '#ffff00', '#ff00ff', '#00ffff'];
    
    for (let i = 0; i < 50; i++) {
        const confetti = document.createElement('div');
        confetti.className = 'confetti';
        confetti.style.left = Math.random() * 100 + '%';
        confetti.style.backgroundColor = colors[Math.floor(Math.random() * colors.length)];
        confetti.style.animationDelay = Math.random() * 0.5 + 's';
        container.appendChild(confetti);
    }
    
    setTimeout(() => container.remove(), 3000);
}

// „É¨„Éô„É´„Åî„Å®„ÅÆ„Éè„Ç§„Çπ„Ç≥„Ç¢„ÇíÂèñÂæó
function getHighScoreForLevel(level) {
    const key = `primeGameHighScore_${level}`;
    return parseInt(localStorage.getItem(key)) || 0;
}

// „É¨„Éô„É´„Åî„Å®„ÅÆ„Éè„Ç§„Çπ„Ç≥„Ç¢„Çí‰øùÂ≠ò
function saveHighScoreForLevel(level, score) {
    const key = `primeGameHighScore_${level}`;
    localStorage.setItem(key, score);
}

// „Éè„Ç§„Çπ„Ç≥„Ç¢Ë°®Á§∫„ÇíÊõ¥Êñ∞
function updateHighScoreDisplay() {
    if (selectedLevel) {
        highScore = getHighScoreForLevel(selectedLevel);
        if (highScore > 0) {
            highScoreDisplay.textContent = `„Éè„Ç§„Çπ„Ç≥„Ç¢ (${selectedLevel}): ${highScore}`;
        } else {
            highScoreDisplay.textContent = `„Éè„Ç§„Çπ„Ç≥„Ç¢ (${selectedLevel}): --`;
        }
    }
}

// „É©„Ç§„ÉïË°®Á§∫„ÇíÊõ¥Êñ∞
function updateLivesDisplay() {
    const lifeIcons = livesDisplay.querySelectorAll('.life-icon');
    lifeIcons.forEach((icon, index) => {
        if (index >= lives) {
            icon.classList.add('lost');
        } else {
            icon.classList.remove('lost');
        }
    });
}

// „Ç≤„Éº„É†„Ç™„Éº„Éê„ÉºÂá¶ÁêÜ
async function gameOver() {
    isGameActive = false;
    gameContent.classList.remove('active');
    gameOverScreen.style.display = 'block';
    finalScoreElement.textContent = score;
    
    // „Çª„ÉÉ„Ç∑„Éß„É≥„Éá„Éº„Çø„Çí‰ΩúÊàê
    const gameEndTime = new Date();
    const gameDuration = gameStartTime ? (gameEndTime - gameStartTime) / 1000 : 0;
    const sessionData = {
        duration: gameDuration,
        questionsAnswered: questionsAnswered,
        level: selectedLevel,
        startTime: gameStartTime?.toISOString(),
        endTime: gameEndTime.toISOString()
    };
    
    // Âü∫Êú¨„ÅÆ„Ç≤„Éº„É†„Ç™„Éº„Éê„Éº„É°„ÉÉ„Çª„Éº„Ç∏
    if (score >= 100) {
        gameOverMessage.textContent = '„Åô„Å∞„Çâ„Åó„ÅÑÊàêÁ∏æ„Åß„ÅôÔºÅÁ¥†Êï∞„Éû„Çπ„Çø„Éº„Åß„Åô„Å≠ÔºÅ';
    } else if (score >= 50) {
        gameOverMessage.textContent = '„Çà„ÅèÈ†ëÂºµ„Çä„Åæ„Åó„ÅüÔºÅ„ÇÇ„ÅÜ‰∏ÄÂ∫¶ÊåëÊà¶„Åó„Å¶„Åø„Åæ„Åó„Çá„ÅÜÔºÅ';
    } else {
        gameOverMessage.textContent = 'Á∑¥Áøí„ÅÇ„Çã„ÅÆ„ÅøÔºÅÊ¨°„ÅØ„ÇÇ„Å£„Å®È´òÂæóÁÇπ„ÇíÁõÆÊåá„Åó„Åæ„Åó„Çá„ÅÜÔºÅ';
    }
    
    // ‰∏äÁ¥ö„É¨„Éô„É´„Åß„Çπ„Ç≥„Ç¢„ÅåË®òÈå≤„Åß„Åç„ÇãÂ†¥Âêà„ÄÅ„É©„É≥„Ç≠„É≥„Ç∞„Å´ËøΩÂä†
    if (selectedLevel === 'hard' && userInfo.nickname && userInfo.affiliation && score > 0) {
        try {
            // „Çπ„Ç≥„Ç¢ÈÄÅ‰ø°‰∏≠„ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏
            gameOverMessage.textContent += ' „Çπ„Ç≥„Ç¢„ÇíË®òÈå≤‰∏≠...';
            
            await rankingSystem.addScore(score, userInfo.nickname, userInfo.affiliation, sessionData);
            
            // ÊàêÂäü„É°„ÉÉ„Çª„Éº„Ç∏
            gameOverMessage.textContent = gameOverMessage.textContent.replace(' „Çπ„Ç≥„Ç¢„ÇíË®òÈå≤‰∏≠...', ' „É©„É≥„Ç≠„É≥„Ç∞„Å´Ë®òÈå≤„Åï„Çå„Åæ„Åó„ÅüÔºÅüéâ');
            
        } catch (error) {
            console.error('„Çπ„Ç≥„Ç¢ÈÄÅ‰ø°„Ç®„É©„Éº:', error);
            
            // „Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏
            gameOverMessage.textContent = gameOverMessage.textContent.replace(' „Çπ„Ç≥„Ç¢„ÇíË®òÈå≤‰∏≠...', ' ‚ö†Ô∏è „Çπ„Ç≥„Ç¢„ÅÆË®òÈå≤„Å´Â§±Êïó„Åó„Åæ„Åó„Åü');
            
            // „Ç®„É©„Éº„ÅÆË©≥Á¥∞„ÇíË°®Á§∫Ôºà„É¨„Éº„ÉàÂà∂Èôê„ÅÆÂ†¥Âêà„Å™„Å©Ôºâ
            if (error.message.includes('1ÂàÜÈñì„Å´1Âõû')) {
                gameOverMessage.textContent += 'ÔºàÈÄ£Á∂öÈÄÅ‰ø°Âà∂ÈôêÔºâ';
            }
        }
    }
    
    // „Ç≤„Éº„É†„Ç™„Éº„Éê„ÉºÈü≥
    playSound(200, 0.5, 'sawtooth');
}

// Á¥†Êï∞Âà§ÂÆöÈñ¢Êï∞
function isPrime(n) {
    if (n <= 1) return false;
    if (n <= 3) return true;
    if (n % 2 === 0 || n % 3 === 0) return false;
    
    for (let i = 5; i * i <= n; i += 6) {
        if (n % i === 0 || n % (i + 2) === 0) {
            return false;
        }
    }
    return true;
}

// Á¥†Âõ†Êï∞ÂàÜËß£Èñ¢Êï∞
function primeFactorization(n) {
    const factors = [];
    let num = n;
    
    // 2„ÅßÂâ≤„Çå„Çã„Å†„ÅëÂâ≤„Çã
    while (num % 2 === 0) {
        factors.push(2);
        num = num / 2;
    }
    
    // 3‰ª•‰∏ä„ÅÆÂ•áÊï∞„ÅßÂâ≤„Çã
    for (let i = 3; i * i <= num; i += 2) {
        while (num % i === 0) {
            factors.push(i);
            num = num / i;
        }
    }
    
    // ÊÆã„Å£„ÅüÊï∞„Åå1„Çà„ÇäÂ§ß„Åç„Åë„Çå„Å∞„Åù„Çå„ÇÇÁ¥†Âõ†Êï∞
    if (num > 1) {
        factors.push(num);
    }
    
    return factors;
}

// „É©„É≥„ÉÄ„É†„Å™Â•áÊï∞„ÇíÁîüÊàê
function generateRandomNumber() {
    // maxNumber„Å´Âü∫„Å•„ÅÑ„Å¶Â•áÊï∞„ÇíÁîüÊàê
    const maxOddIndex = Math.floor((maxNumber - 1) / 2);
    const oddIndex = Math.floor(Math.random() * maxOddIndex) + 1;
    return oddIndex * 2 + 1;
}

// Êñ∞„Åó„ÅÑÂïèÈ°å„ÇíË°®Á§∫
function showNewNumber() {
    currentNumber = generateRandomNumber();
    
    // „Éï„Çß„Éº„Éâ„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥
    numberDisplay.classList.add('changing');
    setTimeout(() => {
        numberDisplay.textContent = currentNumber;
        numberDisplay.classList.remove('changing');
    }, 100);
    
    resultMessage.textContent = '';
    resultMessage.className = 'result-message';
    
    // „Éó„É≠„Ç∞„É¨„Çπ„Éê„ÉºÊõ¥Êñ∞
    questionsAnswered++;
    const progress = Math.min((questionsAnswered / 20) * 100, 100);
    progressBar.style.width = progress + '%';
}

// Á≠î„Åà„Çí„ÉÅ„Çß„ÉÉ„ÇØ
function checkAnswer(userSaysPrime) {
    const actuallyPrime = isPrime(currentNumber);
    const correct = userSaysPrime === actuallyPrime;
    
    // ÊåØÂãï„Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØÔºàÂØæÂøú„Éá„Éê„Ç§„Çπ„ÅÆ„ÅøÔºâ
    if ('vibrate' in navigator) {
        navigator.vibrate(correct ? 50 : [100, 50, 100]);
    }
    
    if (correct) {
        score += 10;
        streak += 1;
        resultMessage.textContent = 'Ê≠£Ëß£ÔºÅ üéâ';
        resultMessage.className = 'result-message correct';
        
        // ÂäπÊûúÈü≥
        playCorrectSound();
        
        // „Çπ„Ç≥„Ç¢Êõ¥Êñ∞„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥
        scoreElement.parentElement.classList.add('updating');
        setTimeout(() => scoreElement.parentElement.classList.remove('updating'), 300);
        
        // ÈÄ£Á∂öÊ≠£Ëß£„Éú„Éº„Éä„Çπ
        if (streak % 5 === 0) {
            score += 20;
            resultMessage.textContent += ` ${streak}ÂïèÈÄ£Á∂öÊ≠£Ëß£ÔºÅ„Éú„Éº„Éä„Çπ +20ÁÇπÔºÅ`;
            playLevelUpSound();
            createConfetti();
            
            // ËôπËâ≤„ÅÆÊû†Á∑ö
            gameContainer.classList.add('streak-5');
            setTimeout(() => gameContainer.classList.remove('streak-5'), 3000);
        }
        
        // „Éè„Ç§„Çπ„Ç≥„Ç¢Êõ¥Êñ∞
        if (score > highScore) {
            highScore = score;
            saveHighScoreForLevel(selectedLevel, highScore);
            updateHighScoreDisplay();
        }
    } else {
        streak = 0;
        lives--;
        
        // „É©„Ç§„Éï„Ç¢„Ç§„Ç≥„É≥„Å´„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥
        const lifeIcons = livesDisplay.querySelectorAll('.life-icon');
        if (lives >= 0 && lives < MAX_LIVES) {
            lifeIcons[lives].classList.add('losing');
            setTimeout(() => {
                lifeIcons[lives].classList.remove('losing');
                updateLivesDisplay();
            }, 500);
        }
        
        if (actuallyPrime) {
            resultMessage.textContent = `ÊÆãÂøµ... ${currentNumber}„ÅØÁ¥†Êï∞„Åß„Åô`;
        } else {
            // Á¥†Âõ†Êï∞ÂàÜËß£„ÇíË°®Á§∫
            const factors = primeFactorization(currentNumber);
            const factorString = factors.join(' √ó ');
            resultMessage.textContent = `ÊÆãÂøµ... ${currentNumber} = ${factorString}`;
        }
        
        // ÊÆã„Çä„É©„Ç§„Éï„ÇíË°®Á§∫
        if (lives > 0) {
            resultMessage.textContent += ` (ÊÆã„Çä„É©„Ç§„Éï: ${lives})`;
        }
        
        resultMessage.className = 'result-message incorrect';
        
        // ÂäπÊûúÈü≥
        playIncorrectSound();
        
        // „Ç≤„Éº„É†„Ç™„Éº„Éê„Éº„ÉÅ„Çß„ÉÉ„ÇØ
        if (lives <= 0) {
            setTimeout(async () => {
                await gameOver();
            }, 1500);
            return;
        }
    }
    
    scoreElement.textContent = score;
    streakElement.textContent = streak;
    
    // 3ÁßíÂæå„Å´Ê¨°„ÅÆÂïèÈ°å„Å∏ÔºàÁ¥†Âõ†Êï∞ÂàÜËß£„ÇíË¶ã„ÇãÊôÇÈñì„ÇíÁ¢∫‰øùÔºâ
    setTimeout(() => {
        if (isGameActive) {
            showNewNumber();
        }
    }, 3000);
}

// „Ç≤„Éº„É†ÈñãÂßã
function startGame() {
    // ‰∏äÁ¥ö„É¨„Éô„É´„ÅÆÂ†¥Âêà„ÄÅ„É¶„Éº„Ç∂„ÉºÊÉÖÂ†±„Çí„Éê„É™„Éá„Éº„Ç∑„Éß„É≥
    if (selectedLevel === 'hard') {
        const affiliation = userAffiliationInput.value.trim();
        const nickname = userNicknameInput.value.trim();
        
        if (!affiliation || !nickname) {
            alert('„É©„É≥„Ç≠„É≥„Ç∞„Å´ÂèÇÂä†„Åô„Çã„Å´„ÅØ„ÄÅÊâÄÂ±û„Å®„Éã„ÉÉ„ÇØ„Éç„Éº„É†„ÅÆÂÖ•Âäõ„ÅåÂøÖË¶Å„Åß„Åô„ÄÇ');
            return;
        }
        
        userInfo.affiliation = affiliation;
        userInfo.nickname = nickname;
    }
    
    isGameActive = true;
    score = 0;
    streak = 0;
    questionsAnswered = 0;
    lives = MAX_LIVES;
    gameStartTime = new Date(); // „Ç≤„Éº„É†ÈñãÂßãÊôÇÈñì„ÇíË®òÈå≤
    scoreElement.textContent = score;
    streakElement.textContent = streak;
    
    startBtn.style.display = 'none';
    backToLevelBtn.style.display = 'none'; // „É¨„Éô„É´ÈÅ∏Êäû„Å´Êàª„Çã„Éú„Çø„É≥„ÇÇÈùûË°®Á§∫
    levelSelection.style.display = 'none';
    userInfoForm.style.display = 'none';
    gameOverScreen.style.display = 'none';
    gameContent.classList.add('active');
    progressContainer.style.display = 'block';
    progressBar.style.width = '0%';
    
    updateHighScoreDisplay();
    updateLivesDisplay();
    showNewNumber();
}

// „É¨„Éô„É´ÈÅ∏Êäû„ÅÆÂá¶ÁêÜ
levelButtons.forEach(button => {
    button.addEventListener('click', () => {
        selectedLevel = button.dataset.level;
        
        // „É¨„Éô„É´„Å´Âøú„Åò„Å¶ÊúÄÂ§ßÊï∞„ÇíË®≠ÂÆö
        switch(selectedLevel) {
            case 'easy':
                maxNumber = 99;
                break;
            case 'medium':
                maxNumber = 299;
                break;
            case 'hard':
                maxNumber = 999;
                break;
        }
        
        // „É¨„Éô„É´ÈÅ∏Êäû„ÇíÈùûË°®Á§∫
        levelSelection.style.display = 'none';
        
        // ‰∏äÁ¥ö„É¨„Éô„É´„ÅÆÂ†¥Âêà„ÄÅ„É¶„Éº„Ç∂„ÉºÊÉÖÂ†±ÂÖ•Âäõ„Éï„Ç©„Éº„É†„ÇíË°®Á§∫
        if (selectedLevel === 'hard') {
            userInfoForm.style.display = 'block';
            startBtn.textContent = '‰∏äÁ¥ö„Åß„Çπ„Çø„Éº„ÉàÔºÅ';
        } else {
            userInfoForm.style.display = 'none';
            startBtn.textContent = `${button.querySelector('.level-name').textContent}„Åß„Çπ„Çø„Éº„ÉàÔºÅ`;
        }
        
        // „É©„É≥„Ç≠„É≥„Ç∞„Éú„Çø„É≥„ÅØÂ∏∏„Å´Ë°®Á§∫Ôºà‰ΩçÁΩÆ„ÅåÂõ∫ÂÆö„Å™„ÅÆ„ÅßË°®Á§∫Âà∂Âæ°‰∏çË¶ÅÔºâ
        
        startBtn.style.display = 'block';
        backToLevelBtn.style.display = 'block'; // „É¨„Éô„É´ÈÅ∏Êäû„Å´Êàª„Çã„Éú„Çø„É≥„ÇÇË°®Á§∫
    });
});

// „Ç§„Éô„É≥„Éà„É™„Çπ„Éä„Éº„ÅÆË®≠ÂÆö
startBtn.addEventListener('click', startGame);
restartBtn.addEventListener('click', () => {
    gameOverScreen.style.display = 'none';
    levelSelection.style.display = 'block';
    userInfoForm.style.display = 'none';
    startBtn.style.display = 'none'; // „Çπ„Çø„Éº„Éà„Éú„Çø„É≥„ÇíÈùûË°®Á§∫
    backToLevelBtn.style.display = 'none'; // „É¨„Éô„É´ÈÅ∏Êäû„Å´Êàª„Çã„Éú„Çø„É≥„ÇÇÈùûË°®Á§∫
    // „É©„É≥„Ç≠„É≥„Ç∞„Éú„Çø„É≥„ÅØÂ∏∏„Å´Ë°®Á§∫„ÅÆ„Åü„ÇÅ„ÄÅÈùûË°®Á§∫„Å´„Åó„Å™„ÅÑ
    selectedLevel = null;
    
    // „É¶„Éº„Ç∂„ÉºÊÉÖÂ†±„Çí„É™„Çª„ÉÉ„Éà
    userInfo.affiliation = '';
    userInfo.nickname = '';
    userAffiliationInput.value = '';
    userNicknameInput.value = '';
    
    // ÊñáÂ≠óÊï∞„Ç´„Ç¶„É≥„Çø„Éº„Çí„É™„Çª„ÉÉ„Éà
    affiliationCounter.textContent = '0/10';
    nicknameCounter.textContent = '0/10';
    affiliationCounter.classList.remove('warning', 'danger');
    nicknameCounter.classList.remove('warning', 'danger');
});

// „É¨„Éô„É´ÈÅ∏Êäû„Å´Êàª„Çã„Éú„Çø„É≥„ÅÆ„Ç§„Éô„É≥„Éà„É™„Çπ„Éä„Éº
backToLevelBtn.addEventListener('click', () => {
    // „É¨„Éô„É´ÈÅ∏ÊäûÁîªÈù¢„Å´Êàª„Çã
    levelSelection.style.display = 'block';
    startBtn.style.display = 'none';
    backToLevelBtn.style.display = 'none';
    userInfoForm.style.display = 'none';
    selectedLevel = null;
    
    // „É¶„Éº„Ç∂„ÉºÊÉÖÂ†±„Çí„É™„Çª„ÉÉ„Éà
    userInfo.affiliation = '';
    userInfo.nickname = '';
    userAffiliationInput.value = '';
    userNicknameInput.value = '';
    
    // ÊñáÂ≠óÊï∞„Ç´„Ç¶„É≥„Çø„Éº„Çí„É™„Çª„ÉÉ„Éà
    affiliationCounter.textContent = '0/10';
    nicknameCounter.textContent = '0/10';
    affiliationCounter.classList.remove('warning', 'danger');
    nicknameCounter.classList.remove('warning', 'danger');
});

// „É©„É≥„Ç≠„É≥„Ç∞„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ„ÅÆ„Ç§„Éô„É≥„Éà„É™„Çπ„Éä„Éº
rankingDashboardBtn.addEventListener('click', showRankingDashboard);
closeRankingBtn.addEventListener('click', closeRankingDashboard);

// „É¢„Éº„ÉÄ„É´„ÅÆÂ§ñÂÅ¥„Çí„ÇØ„É™„ÉÉ„ÇØ„Åó„Åü„Å®„Åç„Å´Èñâ„Åò„Çã
rankingModal.addEventListener('click', (e) => {
    if (e.target === rankingModal) {
        closeRankingDashboard();
    }
});

// „É©„É≥„Ç≠„É≥„Ç∞ÂÜçË©¶Ë°å„Éú„Çø„É≥
rankingRetryBtn.addEventListener('click', async () => {
    await updateRankingDisplay();
});

// ÊñáÂ≠óÊï∞„Ç´„Ç¶„É≥„Çø„Éº„ÅÆ„Ç§„Éô„É≥„Éà„É™„Çπ„Éä„Éº
userAffiliationInput.addEventListener('input', () => {
    updateCharCounter(userAffiliationInput, affiliationCounter, 10);
});

userNicknameInput.addEventListener('input', () => {
    updateCharCounter(userNicknameInput, nicknameCounter, 10);
});

primeBtn.addEventListener('click', () => {
    if (isGameActive && numberDisplay.textContent) {
        checkAnswer(true);
    }
});

notPrimeBtn.addEventListener('click', () => {
    if (isGameActive && numberDisplay.textContent) {
        checkAnswer(false);
    }
});

// „Çø„ÉÉ„ÉÅ„Éá„Éê„Ç§„ÇπÁî®„ÅÆÂá¶ÁêÜÔºà„Éú„Çø„É≥„ÅÆÂèçÂøú„ÇíËâØ„Åè„Åô„ÇãÔºâ
if ('ontouchstart' in window) {
    primeBtn.addEventListener('touchstart', (e) => {
        e.preventDefault();
        if (isGameActive && numberDisplay.textContent) {
            checkAnswer(true);
        }
    });
    
    notPrimeBtn.addEventListener('touchstart', (e) => {
        e.preventDefault();
        if (isGameActive && numberDisplay.textContent) {
            checkAnswer(false);
        }
    });
}

/* ========================================
   Êé≤Á§∫ÊùøÈñ¢ÈÄ£„ÅÆÊ©üËÉΩ
   ======================================== */

// ÊäïÁ®øË°®Á§∫„ÅÆÁä∂ÊÖã„Çí„É™„Çª„ÉÉ„Éà
function resetPostsDisplayState() {
    postsLoading.style.display = 'none';
    postsError.style.display = 'none';
    postsEmpty.style.display = 'none';
    loadMoreContainer.style.display = 'none';
}

// ÊäïÁ®ø‰∏ÄË¶ß„ÇíÊõ¥Êñ∞
async function updatePostsDisplay() {
    // Ë°®Á§∫Áä∂ÊÖã„Çí„É™„Çª„ÉÉ„Éà
    resetPostsDisplayState();
    
    // „É≠„Éº„Éá„Ç£„É≥„Ç∞Ë°®Á§∫
    postsLoading.style.display = 'block';
    
    try {
        const data = await boardSystem.getPosts();
        
        // „Éá„Éº„ÇøÊßãÈÄ†„ÇíÁ¢∫Ë™ç
        const posts = Array.isArray(data) ? data : data.posts || [];
        const totalPosts = data.totalPosts || 0;
        
        // „É≠„Éº„Éá„Ç£„É≥„Ç∞„ÇíÈùûË°®Á§∫
        postsLoading.style.display = 'none';
        
        if (posts.length === 0) {
            postsEmpty.style.display = 'block';
            totalPostsElement.textContent = totalPosts || '0';
            return;
        }

        // ÂÖ®ÊäïÁ®ø„Éá„Éº„Çø„Çí‰øùÂ≠ò
        allPosts = posts;
        displayedPostsCount = 0;
        
        // ÊäïÁ®ø„É™„Çπ„Éà„Çí„ÇØ„É™„Ç¢
        postsList.innerHTML = '';
        
        // ÂàùÊúüÊäïÁ®ø„ÇíË°®Á§∫
        displayMorePosts();
        
        // Á∑èÊäïÁ®øÊï∞„ÇíÊõ¥Êñ∞
        totalPostsElement.textContent = totalPosts;
        
    } catch (error) {
        console.error('ÊäïÁ®øÂèñÂæó„Ç®„É©„Éº:', error);
        postsLoading.style.display = 'none';
        postsError.style.display = 'block';
        postsErrorMessage.textContent = error.message || 'ÊäïÁ®ø„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü';
    }
}

// ÊÆµÈöéÁöÑ„Å´ÊäïÁ®ø„ÇíË°®Á§∫
function displayMorePosts() {
    const startIndex = displayedPostsCount;
    const endIndex = Math.min(startIndex + POSTS_PER_PAGE, allPosts.length);
    
    // Êñ∞„Åó„ÅÑÊäïÁ®ø„ÇíËøΩÂä†Ë°®Á§∫
    for (let i = startIndex; i < endIndex; i++) {
        const post = allPosts[i];
        const postElement = createPostElement(post, i + 1);
        
        // „É¢„Éê„Ç§„É´ÂØæÂøú: Á¢∫ÂÆü„Å´Ë°®Á§∫„Åï„Çå„Çã„Çà„ÅÜÊòéÁ§∫ÁöÑ„Å´„Çπ„Çø„Ç§„É´Ë®≠ÂÆö
        postElement.style.display = 'block';
        postElement.style.visibility = 'visible';
        postElement.style.position = 'relative';
        
        postsList.appendChild(postElement);
    }
    
    // Ë°®Á§∫Ê∏à„ÅøÊäïÁ®øÊï∞„ÇíÊõ¥Êñ∞
    displayedPostsCount = endIndex;
    
    // „Äå„ÇÇ„Å£„Å®Ë¶ã„Çã„Äç„Éú„Çø„É≥„ÅÆË°®Á§∫Âà∂Âæ°
    updateLoadMoreButton();
    
    // „É¢„Éê„Ç§„É´„Éá„Éê„ÉÉ„Ç∞: ÊäïÁ®ø„É™„Çπ„Éà„ÅÆÈ´ò„Åï„ÇíÁ¢∫Ë™ç
    if (window.innerWidth <= 768) {
        console.log(`„É¢„Éê„Ç§„É´Ë°®Á§∫: ${displayedPostsCount}/${allPosts.length}‰ª∂Ë°®Á§∫Ê∏à„Åø`);
    }
}

// „Äå„ÇÇ„Å£„Å®Ë¶ã„Çã„Äç„Éú„Çø„É≥„ÅÆË°®Á§∫Âà∂Âæ°
function updateLoadMoreButton() {
    const remainingPosts = allPosts.length - displayedPostsCount;
    
    if (remainingPosts > 0) {
        // „Åæ„Å†Ë°®Á§∫„Åó„Å¶„ÅÑ„Å™„ÅÑÊäïÁ®ø„Åå„ÅÇ„ÇãÂ†¥Âêà
        loadMoreContainer.style.display = 'block';
        loadMoreCount.textContent = `(ÊÆã„Çä ${remainingPosts}‰ª∂)`;
        loadMoreBtn.disabled = false;
    } else {
        // ÂÖ®„Å¶Ë°®Á§∫Ê∏à„Åø„ÅÆÂ†¥Âêà
        loadMoreContainer.style.display = 'none';
    }
}

// ÊäïÁ®øË¶ÅÁ¥†„Çí‰ΩúÊàê
function createPostElement(post, index) {
    const postDiv = document.createElement('div');
    postDiv.className = 'post-item';
    
    // „É¢„Éê„Ç§„É´ÂØæÂøú: Á¢∫ÂÆü„Å™Ë°®Á§∫„ÅÆ„Åü„ÇÅ„ÅÆÊòéÁ§∫ÁöÑ„Çπ„Çø„Ç§„É´Ë®≠ÂÆö
    postDiv.style.cssText = `
        display: block !important;
        visibility: visible !important;
        position: relative !important;
        width: 100% !important;
        box-sizing: border-box !important;
        opacity: 1 !important;
    `;
    
    // ÊäïÁ®øÊôÇÂàª„Çí„Éï„Ç©„Éº„Éû„ÉÉ„Éà
    const timestamp = new Date(post.timestamp);
    const formattedTime = timestamp.toLocaleString('ja-JP', {
        year: 'numeric',
        month: '2-digit',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit'
    });
    
    // ÁÆ°ÁêÜËÄÖÊäïÁ®ø„ÅÆÂ†¥Âêà„ÅÆ„ÇØ„É©„ÇπËøΩÂä†
    const authorClass = post.isAdmin ? 'post-author admin' : 'post-author';
    
    postDiv.innerHTML = `
        <div class="post-header">
            <span class="${authorClass}">${escapeHtml(post.nickname)}</span>
            <span class="post-timestamp">${formattedTime}</span>
        </div>
        <div class="post-content">${escapeHtml(post.content)}</div>
    `;
    
    return postDiv;
}

// HTML„Ç®„Çπ„Ç±„Éº„ÉóÈñ¢Êï∞Ôºà„Éï„É≠„É≥„Éà„Ç®„É≥„ÉâÁî®Ôºâ
function escapeHtml(text) {
    if (!text || typeof text !== 'string') return '';
    
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

// ÊäïÁ®ø„ÇíÈÄÅ‰ø°
async function submitPost() {
    const nickname = postNicknameInput.value.trim();
    const content = postContentInput.value.trim();
    
    // „Éê„É™„Éá„Éº„Ç∑„Éß„É≥
    if (!nickname || nickname.length < 1 || nickname.length > 15) {
        alert('„Éã„ÉÉ„ÇØ„Éç„Éº„É†„ÅØ1-15ÊñáÂ≠ó„ÅßÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
        return;
    }
    
    if (!content || content.length < 1 || content.length > 300) {
        alert('ÊÑüÊÉ≥„ÉªË≥™Âïè„ÅØ1-300ÊñáÂ≠ó„ÅßÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
        return;
    }
    
    // „Éú„Çø„É≥„ÇíÁÑ°ÂäπÂåñ
    submitPostBtn.disabled = true;
    submitPostBtn.textContent = 'ÊäïÁ®ø‰∏≠...';
    
    try {
        await boardSystem.submitPost(nickname, content);
        
        // ÊàêÂäüÊôÇ„ÅÆÂá¶ÁêÜ
        alert('ÊäïÁ®ø„ÅåÈÄÅ‰ø°„Åï„Çå„Åæ„Åó„ÅüÔºÅ„ÅîÊÑèË¶ã„ÅÇ„Çä„Åå„Å®„ÅÜ„Åî„Åñ„ÅÑ„Åæ„ÅôÔºÅ');
        postNicknameInput.value = '';
        postContentInput.value = '';
        updateCharCounterForPost(postNicknameInput, postNicknameCounter, 15);
        updateCharCounterForPost(postContentInput, postContentCounter, 300);
        
        // ÊäïÁ®ø‰∏ÄË¶ß„ÇíÊõ¥Êñ∞
        await updatePostsDisplay();
        
    } catch (error) {
        alert(`ÊäïÁ®ø„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: ${error.message}`);
        console.error('ÊäïÁ®øÈÄÅ‰ø°„Ç®„É©„Éº:', error);
    } finally {
        // „Éú„Çø„É≥„ÇíÂÜçÊúâÂäπÂåñ
        submitPostBtn.disabled = false;
        submitPostBtn.textContent = 'ÊäïÁ®ø„Åô„Çã';
    }
}

// ÊñáÂ≠óÊï∞„Ç´„Ç¶„É≥„Çø„ÉºÊõ¥Êñ∞Èñ¢Êï∞ÔºàÊã°ÂºµÁâàÔºâ
function updateCharCounterForPost(input, counter, maxLength) {
    const currentLength = input.value.length;
    counter.textContent = `${currentLength}/${maxLength}`;
    counter.classList.remove('warning', 'danger');
    if (currentLength >= maxLength * 0.9) {
        counter.classList.add('danger');
    } else if (currentLength >= maxLength * 0.7) {
        counter.classList.add('warning');
    }
}

/* ========================================
   Êé≤Á§∫Êùø„Ç§„Éô„É≥„Éà„É™„Çπ„Éä„Éº
   ======================================== */

// ÊäïÁ®øÈÄÅ‰ø°„Éú„Çø„É≥
submitPostBtn.addEventListener('click', submitPost);

// „Ç®„É≥„Çø„Éº„Ç≠„Éº„Åß„ÅÆÊäïÁ®øÈÄÅ‰ø°ÔºàCtrl+EnterÔºâ
postContentInput.addEventListener('keydown', (e) => {
    if (e.ctrlKey && e.key === 'Enter') {
        e.preventDefault();
        submitPost();
    }
});

// ÊñáÂ≠óÊï∞„Ç´„Ç¶„É≥„Çø„Éº
postNicknameInput.addEventListener('input', () => {
    updateCharCounterForPost(postNicknameInput, postNicknameCounter, 15);
});

postContentInput.addEventListener('input', () => {
    updateCharCounterForPost(postContentInput, postContentCounter, 300);
});

// ÊäïÁ®øÂÜçË©¶Ë°å„Éú„Çø„É≥
postsRetryBtn.addEventListener('click', updatePostsDisplay);

// „ÇÇ„Å£„Å®Ë¶ã„Çã„Éú„Çø„É≥
loadMoreBtn.addEventListener('click', () => {
    loadMoreBtn.disabled = true;
    loadMoreBtn.querySelector('.load-more-text').textContent = 'Ë™≠„ÅøËæº„Åø‰∏≠...';
    
    // Â∞ë„ÅóÈÅÖÂª∂„ÇíÂÖ•„Çå„Å¶„É¶„Éº„Ç∂„Éº‰ΩìÈ®ì„ÇíÂêë‰∏ä
    setTimeout(() => {
        displayMorePosts();
        loadMoreBtn.querySelector('.load-more-text').textContent = '„ÇÇ„Å£„Å®Ë¶ã„Çã';
        loadMoreBtn.disabled = false;
    }, 300);
});

// „Éö„Éº„Ç∏Ë™≠„ÅøËæº„ÅøÊôÇ„Å´ÊäïÁ®ø‰∏ÄË¶ß„ÇíÂèñÂæó
document.addEventListener('DOMContentLoaded', () => {
    updatePostsDisplay();
}); 